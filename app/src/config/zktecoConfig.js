// sorted in an alphebetical orders
const zktecoConfig = Object.freeze({
  // commands: ['C:1:REBOOT'],

  errorMode: {
    0: 'Successful',
    [-1]: 'The parameter is incorrect.',
    [-2]: 'The transmitted user photo data does not match the given size.',
    [-3]: 'Reading or writing is incorrect.',
    [-9]: 'The transmitted template data does not match the given size.',
    [-10]: 'The user specified by PIN does not exist in the equipment.',
    [-11]: 'The fingerprint template format is illegal.',
    [-12]: 'The fingerprint template is illegal.',
    [-1001]: 'Limited capacity',
    [-1002]: 'Not supported by the equipment',
    [-1003]: 'Command execution timeout',
    [-1004]: 'The data and equipment configuration are inconsistent.',
    [-1005]: 'The equipment is busy.',
    [-1006]: 'The data is too long.',
    [-1007]: 'Memory error',
    [-1008]: 'Failed to get server data',
  },

  enrollError: {
    2: 'Enroll Fingerprint: Fingerprints of the user already exist.',
    4: 'Enroll Fingerprint: Registration fails, usually caused by the inferior quality of fingerprints or the inconsistency of the three fingerprints.',
    5: 'Enroll Fingerprint: Registered fingerprints already exist in the fingerprint database.',
    6: 'Enroll Fingerprint: Registration is cancelled.',
    7: 'Enroll Fingerprint: Registration cannot proceed due to the busy device.',
  },

  privilege: {
    0: 'user',
    2: 'registar',
    6: 'administrator',
    10: 'user_defined',
    14: 'super_user',
  },

  privilegeMap: {
    0: 0,
    user: '0',
    super_user: '14',
    14: 14,
    '': 0,
  },

  syncDataErrorCode: 'Data is synchronized, with n commands successfully processed.',

  language: {
    83: 'Simplified Chinese',
    69: 'English',
    97: 'Spanish',
    70: 'French',
    66: 'Arabic',
    80: 'Portuguese',
    82: 'Russian',
    71: 'German',
    65: 'Persian',
    76: 'Thai',
    73: 'Indonesian',
    74: 'Japanese',
    75: 'Korean',
    86: 'Vietnamese',
    116: 'Turkish',
    72: 'Hebrew',
    90: 'Czech',
    68: 'Dutch',
    105: 'Italian',
    89: 'Slovak',
    103: 'Greek',
    112: 'Polish',
    84: 'Traditional Chinese',
  },

  operationType: {
    0: 'Startup',
    1: 'Shutdown',
    2: 'Authentication fails',
    3: 'Alarm',
    4: 'Access menu',
    5: 'Change settings',
    6: 'Enroll fingerprint',
    7: 'Enroll password',
    8: 'Enroll HID card',
    9: 'Delete user',
    10: 'Delete fingerprint',
    11: 'Delete password',
    12: 'Delete RF card',
    13: 'Clear data',
    14: 'Create MF card',
    15: 'Enroll MF card',
    16: 'Register MF card',
    17: 'Delete MF card registration',
    18: 'Clear MF card content',
    19: 'Move enrolled data into the card',
    20: 'Copy data in the card to the machine',
    21: 'Set time',
    22: 'Delivery configuration',
    23: 'Delete entry and exit records',
    24: 'Clear administrator privilege',
    25: 'Modify access group settings',
    26: 'Modify user access settings',
    27: 'Modify access time period',
    28: 'Modify unlocking combination settings',
    29: 'Unlock',
    30: 'Enroll a new user',
    31: 'Change fingerprint attribute',
    32: 'Duress alarm',
  },

  opLogCode: {
    2: 'userId',
    3: 'alarm',
    5: 'sequenceNumber',
    6: 'userId',
    9: 'userId',
    10: 'userId',
    11: 'userId',
    12: 'userId',
  },

  alarmReason: {
    50: 'Door Close Detected',
    51: 'Door Open Detected',
    53: 'Out Door Button',
    54: 'Door Broken Accidentally',
    55: 'Machine Been Broken',
    58: 'Try Invalid Verification',
    65535: 'Alarm Cancelled',
  },

  verify: {
    0: 'Finger vein or face or fingerprint or card or password (automatic identification)',
    1: 'Only fingerprint',
    2: 'User ID verification',
    3: 'Only password',
    4: 'Only card',
    5: 'Fingerprint or password',
    6: 'Fingerprints or card',
    7: 'Card or password',
    8: 'User ID + fingerprint',
    9: 'Fingerprint + password',
    10: 'Card + fingerprint',
    11: 'Card + password',
    12: 'Fingerprint + password + card',
    13: 'User ID + fingerprint + password',
    14: 'User ID + fingerprint or Card + fingerprint',
    15: 'Face',
    16: 'Face + fingerprint',
    17: 'Face + password',
    18: 'Face + card',
    19: 'Face + fingerprint + card',
    20: 'Face + fingerprint + password',
    21: 'Finger vein',
    22: 'Finger vein + password',
    23: 'Finger vein + card',
    24: 'Finger vein + password + card',
    25: 'Palm print',
    26: 'Palm print + card',
    27: 'Palm print + face',
    28: 'Palm print + fingerprint',
    29: 'Palm print + fingerprint + face',
    200: 'Other',
  },

  NUL: '\0',
  SP: ' ',
  LF: '\n',
  HT: '\t',

  ATTLOGMAP: {
    0: 'userId',
    1: 'time',
    2: 'status',
    3: 'verify',
    4: 'workcode',
    // 6: "Reserved",
    7: 'IDNum',
    8: 'type',
    // 9: "Reserved",
    // 10: "Reserved",
  },

  infoMap: {
    0: 'Firmware',
    1: 'noOfUsers',
    2: 'noOfFingerprints',
    3: 'noOfAttendanceRecords',
    4: 'IP',
    5: 'versionOfFPAlg',
    6: 'VersionOfFaceALG',
    7: 'numberOfFacesRequired',
    8: 'numberOfEnrolledFaces',
    9: 'supportedDevices',
  },

  operationLogMap: {
    0: 'type',
    1: 'userId',
    2: 'time',
    3: 'value1',
    4: 'value2',
    5: 'value3',
    6: 'reserved',
  },

  userMap: {
    PIN: 'userId',
    Name: 'first_name',
    Pri: 'privilege',
    Passwd: 'Passwd',
    Card: 'card_number',
    Grp: 'group',
    TZ: 'tz',
    Category: 'category',
    StartDatetime: 'startDatetime',
    EndDatetime: 'endDatetime',
    Verify: 'verify',
  },
});

module.exports = zktecoConfig;
